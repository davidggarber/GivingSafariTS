<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8"></meta>
    <script> var exports = {}; </script>
    <script src="../js/kit24.js"></script>
    <script src="V/gsr.js" />
    <script>
      const boiler = {
        'safari': 'gs24',
        'title': 'Grandmaâ€™s Secret Recipe',
        'author': 'David Garber',
        'copyright': '2021',
        'type': 'logic',
        abilities: {
          textInput: 'nearest',
          scratchPad: true,
        },
        'reactiveBuilder': true,
        'lookup': {
        },
        "validation":{"extracted":{"VTRGFGBEROBHTUG":"1"}},
      };

      var counts = [
        "   59  81",
        "2 8 46  5",
        "4  268 5 ",
        " 23  1  9",
        "5  3794 8",
        " 67    24",
        "9  72 8  ",
        " 4 6 3 9 ",
        "3 91 7 4 ",
      ];
      var iCodes = {
        'A': 'Baking Soda',
        'B': 'Butter',
        'C': 'Chocolate Chips',
        'E': 'Eggs',
        'F': 'Flour',
        'S': 'Salt',
        'U': 'Sugar',
        'V': 'Vanilla',
        'W': 'Walnuts',
        ' ': '',
      };
      var ingredients = [
        "   SB  WU",
        "B C EA  F",
        "U  WFS E ",
        " VW  C  S",
        "C  AWUS B",
        " BU    SV",
        "W  CU V  ",
        " W U V A ",
        "S EF B C ",
      ];
      var extracts = [
        "..x......",
        ".......x.",
        ".x....x.x",
        "...xx.x..",
        ".x.......",
        "x...x....",
        ".....x..x",
        "........x",
        "........x",
      ];
      var tdStyle = {
        'x': ' extract-td',
        '.': '',
      };
      var eCodes = {
        'x': ' extract',
        '.': '',
      };
      boiler['lookup'] =
      {
        counts: counts,
        iCodes: iCodes,
        ingredients: ingredients,
        extracts: extracts,
        eCodes: eCodes,
        tdStyle: tdStyle,
      };

      var allIngredients = [
        'Baking Soda',
        'Butter',
        'Chocolate',
        'Eggs',
        'Flour',
        'Salt',
        'Sugar',
        'Vanilla',
        'Walnuts',
      ];

      //<![CDATA[
      
      function autoIngredient(inp, key) {
        if (autoCompleteWord(inp, allIngredients)) {
          var len = inp.value.length;
          toggleClass(inp, 'tight', len > 7);
        }
      }

      function onIngredientChange(inp, key) {
        var isLetter = key && key.length == 1 && ((key >= 'A' && key <= 'Z') ||(key >= 'a' && key <= 'z'));
        if (!isLetter || !findParentOfClass(inp, 'ingredient')) {
          return false;
        }
        autoIngredient(inp);
        updateExtraction(inp);
      }

      function onCountChange(inp, key) {
        updateExtraction(inp);
      }

      function updateExtraction(inp) {
        var td = findParentOfClass(inp, 'extract-td');
        if (td) {
          // Optional: if any cells contain partially locked fields, then a missing input should redirect to raw data
          var cInp = td.getElementsByClassName('letter-input')[0];
          var wInp = td.getElementsByClassName('word-input')[0];
          var value = '';
          var index = parseInt(cInp.value);
          if (index >= 1 && index <= 9 && wInp.value.length > index) {
            value = wInp.value.substring(index - 1, index).toUpperCase();
          }
          var ext = td.getElementsByClassName('extracted')[0];
          ext.innerText = value;
          ExtractViaData(ext, value);
        }
      }

      //]]>

    </script>
    <style>
      #table {
        position: absolute;
        top: 2px;
        left: 2px;
        display: table;
      }
      div.tr {
        display: table-row;
      }
      div.td {
        display: table-cell;
        border: solid 1px black;
        width: 80px;
        height: 80px;
        text-align: center;
        vertical-align: middle;
      }
      .count {
        display:block;
      }
      #GramdmasSecretRecipe .count .letter-cell {
        font-size: 16pt;
      }
      .ingredient {
        display: block;
      }
      .ingredient .word-input {
        width: 70px;
        font-size: 11pt;
      }
      .ingredient .word-input.tight {
        letter-spacing: -1px;
      }
      .extract-td {
        background-color: #bbb;
        position: relative;
      }
      span.extracted {
        position: absolute;
        left: 0px;
        top: 0px;
      }
      #extract-and-submit {
        position: absolute;
        left: 1in;
        top: 8in;
      }
    </style>
  </head>
  <body id="GramdmasSecretRecipe">
    <div id="pageBody">

      <div class="table" data-input-style="underline">
        <for range="y" from="0" until="9">
          <div class="tr">
            <for range="x" from="0" until="9">
              <div class="td {tdStyle.[extracts.[y].[x]]}">
                <if test="extracts.[y].[x]" ne=" ">
                  <span class="extracted extract-input extract-literal"></span>
                </if>
                <span class="count">
                  <if test="counts.[y].[x]" ne=" ">
                    {counts.[y].[x]}
                  </if>
                  <if test="counts.[y].[x]" eq=" ">
                    <number class="letter-underline" data-onchange="onCountChange" data-onextract="updateExtraction"></number>
                  </if>
                </span>
                <span class="ingredient">
                  <if test="ingredients.[y].[x]" ne=" ">
                    {iCodes.[ingredients.[y].[x]]}
                  </if>
                  <if test="ingredients.[y].[x]" eq=" ">
                    <word data-onchange="onIngredientChange"></word>
                  </if>
                </span>
              </div>
            </for>
          </div>
        </for>
      </div>

      <div id="extract-and-submit">
        <span id="extracted" data-letter-pattern="15" data-extraction-source="data" data-show-ready="submit-extracted"></span>
        <!--
        <button class="validater" id="submit-extracted" data-extracted-id="extracted">Submit</button>
        -->
      </div>

    </div>
  </body>
</html>
