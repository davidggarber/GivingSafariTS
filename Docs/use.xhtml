<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8"></meta>
    <script> var exports = {}; </script>
    <script src="../js/kit25.js"></script>
    <script>
      //<![CDATA[
      const boiler = {
        'safari': 'Docs',
        'title': '<use>',
        'paperSize': 'ledger',
        'orientation': 'landscape',
        'textInput': true,
        'abilities': {
        },
        'reactiveBuilder': true,
        'lookup': {
        } 
      };
      //]]>
    </script>
    <script src="docs.js"></script>
    <link href="docs.css" rel="Stylesheet" type="text/css"></link>
    <style>
      #right-side code.inline {
        width: initial;
      }
      .group {
        width: 100%;
        margin-bottom: 6pt;
      }
      .indent {
        margin-left: 0.1in;
      }
      th {
        text-align: left;
        padding-top: 10px;
      }
      #grid-example td {
        background-color: initial;
      }
    </style>
  </head>
  <body id="If">
    <div id="pageBody">
      <div id="left-side">

        <h1>&lt;template&gt;</h1>

        <p>Templates are an existing concept within HTML. Anything inside &lt;template&gt; tags is kept in a side cache, and can be cloned into the document whenever needed.</p>

        <p>The evolution here is that templates can take arguments. Any <code>{formulas}</code> within the template body will have access to both global <a href="builder.xhtml">lookup</a> fields, as well as inline values passed to the template directly.</p>

        <h3>Example</h3>

        <p>Define a template "img-grid".</p>

<code onclick="selectCodeBlock(this, event)"><pre>&lt;template id="img-grid"&gt;
  &lt;for int="row" from="1" to="{rows}"&gt;
    &lt;for int="col" from="1" to="{cols}"&gt;
      &lt;img src="img_{row}_{col}.jpg"&gt;
    &lt;/for&gt;&lt;br&gt;
  &lt;/for&gt;
&lt;/template&gt;</pre></code>
        
        <h3>Default args</h3>
        <p>A template can specify default args as <code>default-<i>arg-name</i></code>.<br />
          So in the above example, if the default for both <i>row</i> and <i>col</i> were 2, you'd start with:
        </p>
<code onclick="selectCodeBlock(this, event)"><pre>&lt;template id="img-grid" default-row="2" default-col="2"&gt;
  &hellip;
&lt;/template&gt;</pre></code>

        <h3>Nested templates</h3>

        <p>Templates can call other templates. They may also pass parameters from the outer caller through to the inner.</p>

<code onclick="selectCodeBlock(this, event)"><pre>&lt;template id="sudoku"&gt;
  &lt;div class="sudoku-grid"&gt;
    &lt;for int="row" from="1" to="9"&gt;
      &lt;for int="col" from="1" to="9"&gt;
        &lt;use template="sudoku-cell" row={row} col={col} data={data.[{row}].[{col}]}&gt;
      &lt;/for&gt;&lt;br&gt;
    &lt;/for&gt;
  &lt;/div&gt;
&lt;/template&gt;
&lt;template id="sudoku-cell"&gt;
  &lt;div class="sudoku-cell"&gt;
    &lt;if test={data}&gt;&lt;number {data}
  &lt;numberfor int="row" from="1" to="9"&gt;
      &lt;for int="col" from="1" to="9"&gt;
        &lt;use template="sudoku-cell" row={row} col={col} init={data.[{row}].[{col}]}&gt;
      &lt;/for&gt;&lt;br&gt;
    &lt;/for&gt;
  &lt;/div&gt;
&lt;/template&gt;</pre></code>
        


      </div>

      <div id="right-side">

        <h1>&lt;use&gt;</h1>

        <p>The &lt;use&gt; tag injects the contents of templates, with the added functionality that it can pass parameters.</p>
        <p>Invoke the template, passing arguments.</p>

<code onclick="selectCodeBlock(this, event)"><pre>&lt;div id="some-page-element"&gt;
  &lt;use template="img-grid" rows="2" cols="3"&gt;
&lt;/div&gt;</pre></code>

        <p style="margin-bottom:0px;">Within the &lt;template&gt; element at left&hellip;</p>
        <ul style="margin-top:0px;">
          <li><code class="inline">id="img-grid"</code>
            names the template, so it can be called later.</li>
          <li><code class="inline">{rows}</code> and <code class="inline">{cols}</code>
            are used within the template, but are undefined. They need to be passed in.</li>
          <li><code class="inline">{row}</code> and <code class="inline">{col}</code>
            are defined by the &lt;for&gt; elements within the template.</li>
        </ul>

        <p style="margin-bottom:0px;">Within the &lt;use&gt; element&hellip;</p>
        <ul style="margin-top:0px;">
          <li><code class="inline">template="img-grid"</code>
            identifies which template to inject.</li>
          <li><code class="inline">rows="2"</code> and <code class="inline">cols="3"</code>
            are parameters, passed into the template.<br />
            In this case, they will cause 6 images to be created, in two rows of 3.</li>
        </ul>


        <p>Note that the HTML table tags don't play well with
          <code class="inline">&lt;use&gt;</code> or
          <code class="inline">&lt;for&gt;</code> tags.<br />
          As such, encode table (and some other) tags:
          <code class="inline">&lt;ttable&gt;</code>,
          <code class="inline">&lt;ttr&gt;</code>,
          <code class="inline">&lt;tth&gt;</code>,
          <code class="inline">&lt;ttd&gt;</code> &hellip;
        </p>

        <h3 style="margin-top: 48px;">Builder Lookup Data</h3>
        <p>All examples are based on these sample entries in the boiler javascript object.</p>
        <code onclick="selectCodeBlock(this, event)"><pre>
const boiler = {
  'lookup': {
    magic: 123,
    sentence: 'Help docs',
    fonts: [ 
      'bold', 
      'italic' 
    ],
    enabled: true
  }
}</pre></code>


        <h3>Page organization</h3>

        <p>Do not define a &lt;template&gt; within a build area.<br />
          As a rule, define them at the end of the document, after the &lt;div id="pageBody"&gt;&lt;/div&gt;.</p>

      </div>
    </div>

    <template id="code">
      <code onclick="selectCodeBlock(this, event)">{value}</code>
    </template>
    <template id="tag">
      <use template="code" value="&lt;{value}&gt;"></use>
    </template>
    <template id="iftest">
      <code onclick="selectCodeBlock(this, event)">&lt;use test="{row!.var}" <b style="font-size: large;">{row!.oper}</b>="{row!.val}"&gt;<br/>
        &nbsp; <i>&lt;!-- contents --&gt;</i>
        &lt;/if&gt;
      </code>
    </template>

  </body>
</html>