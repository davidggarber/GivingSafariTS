<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8"></meta>
    <script> var exports = {}; </script>
    <script src="../js/kit24.js"></script>
    <script>
      //<![CDATA[

      const boiler = {
        'safari': 'Docs',
        'title': 'Builder',
        paperSize: 'ledger',
        orientation: 'landscape',
        textInput: true,
        abilities: {
        },
        reactiveBuilder: true,
        lookup: {
          size: 20,
          color: 'red',
          voted: true,
          ducks: ['Huey', 'Duey', 'Louie'],
          pt: {x:4, y:6},

          inputTags: [
            ['letter', 'letter', 'A small input for a single character'],
            ['letters', 'letters', "Input for a couple of characters, when that's meant to be ambiguous"],
            ['number', 'letters', 'Like <letter>, but restricted to numbers'],
            ['numbers', 'letters', 'Like <letters>'],
            ['word', 'word', 'A wider input, suitable for a word or phrase'],
            ['literal', 'letters', 'Places fixed text amidst letter inputs. Useful for punctuation.'],
            ['pattern', 'pattern', 'Generates multiple <letter> inputs, with variable extraction.']
          ],
          controlTags: [
            [['for'], 'Generates copies of the contents of this element in a parameterized loop'],
            [['if','elseif','else'], 'Either includes or omits the contents of this element, depending on conditions'],
            [['use'], 'Like a function call. Replaces this element with the contents of a <template>.'],
          ],
        }
      };

      function onthrow(err, elmt) {
        alert(err);
      }
      //]]>
    </script>
    <script src="docs.js"></script>
    <link href="docs.css" rel="Stylesheet" type="text/css"></link>
    <style>
      .tall-rows th, .tall-rows td {
        padding: 3px;
      }

      .tight p, .tight ul {
        margin:0px;
      }

      .bigbold {
        font-size: larger;
        font-weight: bold;
      }

      .error {
        background-color: #c00;
        color: white;
        font-weight: bold;
      }
    </style>
  </head>
  <body id="Builder">
    <div id="pageBody">
      <div id="left-side">

        <h2>Dynamically built pages</h2>
        <p>
          While you can build full puzzle pages from scratch, without dynamic elements,
          many puzzles benefit from programatic construction.
        </p>
        <p>
          It can help to separate the puzzle structure from the page layout. 
          Especially given that page layout in HTML can be very verbose.
        </p>
        <p>
          Furthermore, many puzzles have repeating components, such as a table or grid.
          Coding all of those elements individually and consistently invites subtle errors,
          either as typos when authoring, or as incomplete edits that missed a row.
        </p>
        <p>
          There is now a set of tool to enable two chunks of functionality.
        </p>  
        <ul>
          <li>An extended set of new HTML elements. 
            Some focused on standardizing text inputs. 
            Others for dynamic page construction.</li>
          <li>Access to variables defined in javascript, 
            which can be be injected into text and elements.</li>
        </ul>
        <p>
          To enable all of these features, set <span class="bigbold">reactiveBuilder:true</span>
          in the <a href="boiler.html">boiler</a> script.
        </p>
        <p>
        move all of the puzzle elements into one element
          If you specify <b>reactiveBuilder</b> in the boiler, 
          you can define ranges of the page that will be parsed and rebuilt based 
          on a set of HTML-extended elements and text injection.
        </p>

        <h3>Content Elements</h3>

        <p>There is a growing list of new elements which inject useful puzzle controls. Especially text input.</p>
        <build>
          <ttable class="tall-rows">
            <for each="inp" in="inputTags">
              <ttr>
                <tth><a href="{inp.1}.html">&lt;{inp.0}&gt;</a></tth>
                <ttd>&mdash; {inp.2}</ttd>
              </ttr>
            </for>
          </ttable>
        </build>

        <h3>Dynamic HTML</h3>

        <p>Sometimes, you want to have some HTML generate lots more. To that end&hellip;</p>
        <build>
          <ttable class="tall-rows">
            <for each="inp" in="controlTags">
              <ttr>
                <tth>
                  <for each="tag" in="inp.0">
                    <a href="{inp.0.0}.html">&lt;{tag}&gt;</a>
                  </for>
                </tth>
                <ttd>&mdash; {inp.1}</ttd>
              </ttr>
            </for>
          </ttable>
        </build>

        <p>
          <b>Whitespace</b> is generally boolean. Either there is some between content, or there is none. However,<br />
          formatting and the dynamic programming elements can unintentially introduce whitespace. <br />
          To override this, any element can specify a <b>trim</b> attribute, for whitespace inside it. The values are:</p>
          <ul>
            <li><b>off</b> - any whitespace in the HTML is kept as is (the default) .</li>
            <li><b>on</b> - removes any whitespace between elements that is only whitespace.</li>
            <li><b>pre</b> - trim the indentation whitespace within this element, to match the first child line.</li>
            <li><b>all</b> - trim every text region between elements. If you want a space, you'll need <i>&amp;nbsp;</i>.</li>
          </ul>

      </div>


      <div id="right-side">

        <h3>Text Lookup and Injection</h3>
        <p>First, declare a set of variables in javascript, as part of the <a href="boiler.html">boiler</a> script.</p>
<code><pre>
&lt;script&gt;
    const boiler = {
        &hellip;
        <span class="bigbold">reactiveBuilder</span>: true,
        <span class="bigbold">lookup</span>: {  // the following are examples
            size: 20,
            color: 'red',
            voted: true,
            ducks: ['Huey', 'Duey', 'Louie'],
            pt: {x:4, y:6},
        }
    };
&lt;/script&gt;
</pre></code>

        <build>
          <p>
            Then ensure that you are using at least one of the extended builder elements.
            When in doubt, wrap any relevant HTML inside 
            <code style="width:initial">&lt;build&gt; &hellip; &lt;/build&gt;</code> tags.
          </p>

          <p>
            Then use curly braces <span class="bigbold">`{`}</span> in any text context. 
            They will re-evaluate their contents programatically.
          </p>
          <p style="position: relative;">
            For example:
            <code style="width:initial">&lt;span style='color:`{color`};font-size:`{size`}pt'&gt;Code `{color`} `{size`}&lt;/span&gt;</code> 
          </p>
          <div style="position: relative; height: 24pt;">
            would look like:
            <div style="position:relative; left:1.2in; top:-16pt; width: 2in; border: solid 1px gray; padding: 3px;" >
              <span sstyle='color:{color};font-size:{size}pt'>Code {color} {size}</span>
            </div>
          </div>
        </build>


        <h3>Global Variables</h3>
        <p>Initially, all the values specified in <span class="bigbold">lookup</span> 
          are variables that can be looked up and injected.
        </p>
        <p>That includes exploring and manipulating those values, such as 
          <code style="width:initial">{pt.x}</code> or even <code style="width:initial">{pt.x + 2}</code>.
          <br />See <a href="formulas.html">formulas</a> for in-depth documentation.
        </p>
        
        <h3>Local Scope Variables</h3>
        <p>Inside the dynamic HTML control elements (listed at left), additional variables are created.</p>
        <table>
          <tr>
            <th style="width:1in; vertical-align: top;">
              <a href="for.html">&lt;for&gt;</a>
            </th>
            <td class="tight">
              <p>Creates iterating variables that are available to the contents. 
                <br />The name is declared in the element, such as 
                <code style="width:initial">&lt;for <span class="bigbold">each='duck'</span> in='{ducks}'&gt;</code>
              </p>
              <ul>
                <li><code style="width:initial">{duck}</code> &mdash; the name of each duck</li>
                <li><code style="width:initial">{duck#}</code> &mdash; a counter of the progress through the list, starting at 0</li>
              </ul>
              <p>Or when iterating through an object, such as 
                <code style="width:initial">&lt;for <span class="bigbold">key='axis'</span> in='{pt}'&gt;</code>
              </p>
              <ul>
                <li><code style="width:initial">{axis}</code> &mdash; the name of each axis key</li>
                <li><code style="width:initial">{axis!}</code> &mdash; the value of each axis, which could also be 
                  <code style="width:initial">{pt.[axis]}</code>
                </li>
                <li><code style="width:initial">{axis#}</code> &mdash; is still a counter</li>
              </ul>
            </td>
          </tr>
          <tr>
            <th style="width:1in; vertical-align: top;">
              <a href="use.html">&lt;use&gt;</a>
            </th>
            <td class="tight">
              <p>Creates arguments, which can be employed in the &lt;template&gt;s they call. 
                <br />Any number of arguments can be declared in the &lt;use&gt; tag, such as 
                <code style="width:initial">&lt;use template="review" <span class="bigbold">name='Bob' vote='{voted}'</span>&gt;</code>
                Within the template&hellip;
              </p>
              <ul>
                <li><code style="width:initial">{vote}</code> &mdash; will be True (boolean)</li>
                <li><code style="width:initial">{vote!}</code> &mdash; will be 'true' (text)</li>
                <li><code style="width:initial">{vote$}</code> &mdash; will be '{voted}', in case that's interesting</li>
                <li><code style="width:initial">{name}</code>, <code style="width:initial">{name!}</code>,
                  <code style="width:initial">{name$}</code> &mdash; will all be 'Bob'</li>
              </ul>
            </td>
          </tr>
        </table>
        
      </div>
    </div>

    <template id="code">
      <code ondblclick="selectCode(this, event)"><nobr>{value}</nobr></code>
    </template>

    <template id="taglink">
      <if exists="dest?">
        <a href="{dest}"><code onclick="selectCodeBlock(this, event)">{value}</code></a>
      </if>
      <else>
        <code onclick="selectCodeBlock(this, event)">{value}</code>
      </else>
    </template>

  </body>
</html>