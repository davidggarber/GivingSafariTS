<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8"></meta>
    <script> var exports = {}; </script>
    <script src="../js/kit24.js"></script>
    <script src="docs.js"></script>
    <script>
      const boiler = {
        safari: 'Docs',
        paperSize: 'ledger',
        orientation: 'portrait',
        title: '&lt;letter/&gt;',
        reactiveBuilder: true
      };
    </script>
    <script src="docs.js"></script>
    <link href="docs.css" rel="Stylesheet" type="text/css"></link>
    <style>
      code b, .code b {
        font-size: 11pt;
      }
      th {
        text-align: left;
      }
      td.code {
        font-family: 'Courier New', Courier, monospace;
        background-color: lightblue;
        border: blue solid 1px;
        white-space: nowrap;
      } 
      td.rendered {
        text-align: center;
        white-space: nowrap;
      }
      td.comment {
        font-style: italic;
      }
      td.comment code {
        font-style: normal;
      }
      td.override {
        font-family: 'Courier New', Courier, monospace;
        white-space: nowrap;
        vertical-align: bottom;
      }
      td.style {
        font-family: 'Courier New', Courier, monospace;
        white-space: nowrap;
      }
      tr.alt:nth-child(odd) td {
        background-color: #ffffdd;
      }
      tr.alt:nth-child(odd) td.code {
        background-color: lightblue;
      }
      td li {
        text-indent: -20px;
        padding-left: 20px;
      }
    </style>
  </head>

  <body id="Letter">
    <div id="pageBody">
      <p style="font-weight:bold">Creates a small input field, sized for a single letter.</p>
      <p>Automatically gains type-support features.</p>
      <li>Typing moves the focus to the next field (in doc order).</li>
      <li>Backspace deletes, and moves focus back to previous field.</li>
      <li>Left/right arrow keys work.</li>
      <li>Up/down arrow keys need additional infrastructure. (NEED LINK)</li>
      <li>Support for several common stylings, such as underlines and boxes (see below).</li>

      <h2>Attribute-driven variations:</h2>
      <build>
        <table class="alternating-rows" style="width:100%; border-spacing: 2px;">
          <tr>
            <th>HTML</th>
            <th>Rendered</th>
            <th></th>
          </tr>
          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;letter/&gt;
            </td>
            <td class="rendered"><letter /></td>
            <td class="comment">Input for a single letter</td>
          </tr>

          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;letter/&gt;
              &lt;letter <b>extract=''</b>/&gt;
            </td>
            <td class="rendered">
              <letter />
              <letter extract='true' />
            </td>
            <td class="comment">
              <code>extract=''</code> (implicitly <code>extract='true'</code>)
              marks that letter for extraction.<br />
              Extracted entries will be mirrored to an element with <b>id="extracted"</b>,<br />
              preserving their relative order within the document.
            </td>
          </tr>

          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;letter extract<b>="5"</b>/&gt;&lt;letter extract<b>="3"</b>/&gt;
            </td>
            <td class="rendered">
              <letter extract="5" /><letter extract="3" />
            </td>
            <td class="comment">
              <code>extract='[number]'</code> allows the entries mirrored to <b>id="extracted"</b><br />
              to be re-ordered. In this case, these two letters will become the 5th and 3rd letters in the eventual extraction.
            </td>
          </tr>

          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;letter extract="true" <b>extractedid="alt"</b>/&gt;
            </td>
            <td class="rendered">
              <letter extract='' extractedid="alt" />
            </td>
            <td class="comment">
              <code>extractedid='[suffix]'</code> re-routes extracted entries to alternate collections.<br />
              In this case, to <b>id="extracted-<i>alt</i>"</b>.
            </td>
          </tr>

          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;letter/&gt;&lt;letter <b>literal="+"</b>/&gt;&lt;letter/&gt;
            </td>
            <td class="rendered">
              <letter /><letter literal="+" /><letter />
            </td>
            <td class="comment">
              <code>literal="[char]"</code> identifies this letter as read-only.<br />
              Its rendering is initially different, and can be controlled separately.
            </td>
          </tr>

          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;letter/&gt;&lt;letter <b>block=""</b>/&gt;&lt;letter/&gt;
            </td>
            <td class="rendered">
              <letter /><letter block="" /><letter />
            </td>
            <td class="comment">
              <code>block=''</code> triggers a special literal: a solid dark block, as used in crosswords.<br />
              If a block is given a value, that text will be applied as a literal.<br />
              Alternate syntax: <code>&lt;letter literal='Â¤' /></code>
            </td>
          </tr>

        </table>  
      </build>      



      <h2>Page-wide overrides</h2>
      <p>Letter styles are implemented through CSS. Each letter becomes an &lt;span&gt;&lt;input&gt;&lt;/span&gt;
        <br />where the span is assigned a style based on the variant and any style overrides.
      </p>
      <table class="alternating-rows" style="width:100%;">
        <tr>
          <th>Override attribute</th>
          <th>Default, if unset</th>
          <th>Other Suggestions</th>
        </tr>
        <tr class="alt">
          <td class="override">data-letter-style</td>
          <td>underline: <letter /><letter /></td>
          <td>box: <span data-letter-style="box"><letter /><letter /></span> 
            , grid: <span data-letter-style="grid"><letter /><letter /></span> 
            , hover: <span data-letter-style="hover"><letter /><letter /></span> <i>(inputs are invisible, except on hover)</i>
          </td>
        </tr>
        <tr class="alt">
          <td class="override">data-literal-style</td>
          <td>none: <letter /><letter literal="+" /><letter /></td>
          <td>underline: <span data-literal-style="underline"><letter /><letter literal="+" /><letter /></span> 
            , box: <span data-letter-style="box" data-literal-style="box"><letter /><letter literal="+" /><letter /></span> 
            , grid: <span data-letter-style="grid"><letter /><letter literal="+" /><letter /></span> 
          </td>
        </tr>            
        <tr class="alt">
          <td class="override">data-extract-style</td>
          <td>box: <letter /><letter extract='true' /><letter /></td>
          <td>highlight: <span data-extract-style="highlight"><letter /><letter extract='true' /><letter /></span> 
            , box: <span data-letter-style="box" data-literal-style="highlight"><letter /><letter extract='true' /><letter /></span> 
            , grid: <span data-letter-style="grid"><letter /><letter extract='true' /><letter /></span> 
          </td>
        </tr>            
      </table>
        
      <h2>CSS overrides</h2>
      <p>Letter tags generate &lt;span&gt; and &lt;input&gt; elements, with styles that can be overridden.</p>
      <table class="alternating-rows" style="width:100%;">
        <tr>
          <th>Style</th>
          <th>Found on</th>
          <th>Good place to override</th>
        </tr>
        <tr class="alt">
          <td class="style">.letter-cell</td>
          <td>The &lt;span&gt; around each &lt;input&gt;, regardless of display style</td>
          <td>
            <li>Font (family, size, color)</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-input</td>
          <td>The &lt;input&gt; itself</td>
          <td>
            <li><b>Rarely!</b> The intent is that inputs inherit formatting from their span.letter-cell</li>
          </td>
        </tr>

        <tr>
          <td colspan="3" style="font-weight: bold;">Letter styles (always ".letter-" + the style name)</td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-underline</td>
          <td>The span.letter-cell, when data-letter-style=<b>underline</b></td>
          <td>
            <li>Any change in spacing (margin) between underlines</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-box</td>
          <td>The span.letter-cell, when data-letter-style=<b>box</b></td>
          <td>
            <li>Any change in spacing (margin) between boxes</li>
            <li>Rounded corners on boxes</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-grid</td>
          <td>The span.letter-cell, when data-letter-style=<b>grid</b></td>
          <td>
            <li>tbd</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-hover:hover</td>
          <td>The span.letter-cell, when data-letter-style=<b>hover</b></td>
          <td>
            <li>Any change in hover effect</li>
          </td>
        </tr>

        <tr>
          <td colspan="3" style="font-weight: bold;">Literal styles (".literal-" + the style name)</td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-cell<b>.literal</b></td>
          <td>The span.letter-cell when input is a literal</td>
          <td>
            <li>Literal text's font</li>
            <li>Literal text's vertical alignment, relative to input text</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.literal-underline</td>
          <td>The span.letter-cell.literal, when data-literal-style=<b>underline</b></td>
          <td>
            <li>Mirror any changes to .letter-underline</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.literal-box</td>
          <td>The span.letter-cell.literal, when data-literal-style=<b>box</b></td>
          <td>
            <li>Mirror any changes to .letter-box</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.block</td>
          <td>The span.letter-cell.literal, when <b>block=''</b></td>
          <td>
            <li>Change the block color</li>
          </td>
        </tr>

        <tr>
          <td colspan="3" style="font-weight: bold;">Extract styles</td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-cell<b>.extract</b></td>
          <td>The span.letter-cell, when input an extracter</td>
          <td>
            <li>TBD</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.extract-highlight</td>
          <td>The span.letter-cell.extract, when data-extract-style=<b>highlight</b></td>
          <td>
            <li>The font (size, color, &hellip;) of letters in extraction cells.</li>
            <li>Change the highlight color</li>
          </td>
        </tr>

        <tr class="alt">
          <td class="style">.under-number</td>
          <td>A second span, inside the span.letter-cell, which contains the extraction number</td>
          <td>
            <li>The font (face, size, &hellip;) of numbers under extractions, indicating mirrored cell.</li>
          </td>
        </tr>

      </table>
      <p>To ensure a successful override, prefix your local CSS rule with the puzzle's body ID. i.e.<br />
        <code>#MyPuzzle .letter-cell { font-size: 20pt; }</code>
      </p>

    </div>
  </body>
        
</html>