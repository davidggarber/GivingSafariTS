<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8"></meta>
    <script> var exports = {}; </script>
    <script src="../js/kit24.js"></script>
    <script src="docs.js"></script>
    <script>
      const boiler = {
        safari: 'Docs',
        paperSize: 'ledger',
        orientation: 'portrait',
        title: '&lt;word/&gt;',
        reactiveBuilder: 'pageBody'
      };
    </script>
    <script src="docs.js"></script>
    <link href="docs.css" rel="Stylesheet" type="text/css"></link>
    <style>
      code b, .code b {
        font-size: 11pt;
        background-color: #c3e5f0;
      }
      th {
        text-align: left;
      }
      td.code {
        font-family: 'Courier New', Courier, monospace;
        background-color: lightblue;
        border: blue solid 1px;
        white-space: nowrap;
      } 
      td.rendered {
        text-align: center;
        white-space: nowrap;
      }
      td.comment {
        font-style: italic;
      }
      td.comment code {
        font-style: normal;
      }
      td.style {
        font-family: 'Courier New', Courier, monospace;
        white-space: nowrap;
      }
      tr.alt:nth-child(odd) td {
        background-color: #ffffdd;
      }
      tr.alt:nth-child(odd) td.code {
        background-color: lightblue;
      }
      li {
        text-indent: -20px;
        padding-left: 20px;
      }
      #overrides td {
        vertical-align: top;
      }
      #overrides td.override {
        font-family: 'Courier New', Courier, monospace;
        white-space: nowrap;
        padding-top: 8px;
      }
    </style>
  </head>

  <body id="Word">
    <div id="pageBody">
      <p style="font-weight:bold">Creates a wider input field, sized for a medium-long word.</p>
      <p>Automatically gains some type-support features, but not as many as <use template="link" elmt="letter" />.</p>
      <li>Typing stays in the same field. User must type tab or an arrow.</li>
      <li>Backspace deletes within the field. Once empty, backspace moves focus back to previous field.</li>
      <li>Left/right arrow keys work, first within the field, then between them.</li>
      <li>Up/down arrow keys need additional infrastructure. By default, they always move to the next field. (NEED LINK)</li>
      <li>Support for several common stylings, such as underlines and boxes (see below).</li>

      <h2>Attribute-driven variations:</h2>
      <table class="alternating-rows" style="width:100%; border-spacing: 2px;">
        <tr>
          <th>HTML</th>
          <th>Rendered</th>
          <th></th>
        </tr>
        <tr class="alt">
          <td class="code" onclick="selectCodeBlock(this, event)">
            &lt;word/&gt;
          </td>
          <td class="rendered"><word /></td>
          <td class="comment">
            Input for a typical word (default width: 1.5 inch)<br />
            But there is no constraint. Players may type multiple words.
          </td>
        </tr>

        <tr class="alt">
          <td class="code" onclick="selectCodeBlock(this, event)">
            &lt;word <b>extract='3'</b>/&gt;
          </td>
          <td class="rendered">
            <word extract='3' />
          </td>
          <td class="comment">
            <code>extract='[index]'</code>
            marks n<sup>th</sup> letter in that word for extraction.<br />
            Extracted entries will be mirrored to an element with <b>id="extracted"</b>,<br />
            preserving their relative order within the document.
          </td>
        </tr>

        <tr class="alt">
          <td class="code" onclick="selectCodeBlock(this, event)">
            &lt;word extract<b>="2.1"</b>/&gt;
          </td>
          <td class="rendered">
            <word extract="2.1" />
          </td>
          <td class="comment">
            <code>extract='[word.index]'</code> marks the n<sup>th</sup> letter in the m<sup>th</sup> word for extraction.<br />
            The lengths of other words are immaterial.
          </td>
        </tr>

        <tr class="alt">
          <td class="code" onclick="selectCodeBlock(this, event)">
            &lt;word extract<b>="*"</b>/&gt;
          </td>
          <td class="rendered">
            <word extract="*" />
          </td>
          <td class="comment">
            <code>extract='*'</code> marks the full word for extraction.
          </td>
        </tr>

        <tr class="alt">
          <td class="code" onclick="selectCodeBlock(this, event)">
            &lt;word extract="1" <br />
                  <b>extracted-id="alt"</b>/&gt;
          </td>
          <td class="rendered">
            <word extract='1' extracted-id="alt" />
          </td>
          <td class="comment">
            <code>extracted-id='[suffix]'</code> re-routes extracted entries to alternate collections.<br />
            In this case, to <b>id="extracted-<i>alt</i>"</b>.
          </td>
        </tr>

        <tr class="alt">
          <td class="code" onclick="selectCodeBlock(this, event)">
            &lt;word <b>literal="+"</b>/&gt;
          </td>
          <td class="rendered">
            <word literal="+" />
          </td>
          <td class="comment">
            <code>literal="[char]"</code> identifies this text as read-only.<br />
            Its rendering is initially different, and can be controlled separately.
          </td>
        </tr>
      </table>

      <div>
        All &lt;word extract='...'/&gt; examples on this page will mirror extractions to here:
        <span id="extracted" />
        <br />(unless the extracted-id points elsewhere).
      </div>
      

      <h2>Page-wide overrides</h2>
      <p>Word styles are implemented through CSS. Each letter becomes an &lt;span&gt;&lt;input&gt;&lt;/span&gt;
        <br />where the span is assigned a style based on the variant and any style overrides.
        <br />NOTE: multiple styles can be combined. Separate with spaces.
      </p>
      <table id="overrides" class="alternating-rows" style="width:100%;">
        <tr>
          <th>Override attribute</th>
          <th>Default, if unset</th>
          <th>Other Suggestions</th>
        </tr>
        <tr class="alt">
          <td class="override">data-word-style</td>
          <td>underline: <word /> <word /></td>
          <td>box: <span data-word-style="box"><word /></span> 
          </td>
        </tr>
        <tr class="alt">
          <td class="override">data-index-style</td>
          <td>none: <word extract="3" /></td>
          <td>under: <span data-index-style="under"><word extract="3" /></span>,
            after: <span data-index-style="after"><word extract="3" /></span> 
            <br />&nbsp;
            <br />Note that these 'under-numbers' are different than letters',
            <br />as they reflect the index of the source, not the destination.
          </td>
        </tr>
      </table>


      <h2>CSS overrides</h2>
      <p>Word tags generate &lt;span&gt; and &lt;input&gt; elements, with styles that can be overridden.<br />
        If there is an extracted letter, its index is placed in a separate &lt;span&gt;[index]&lt;/span&gt; inside the above &lt;span&gt;.
      </p>
      <span style="background-color:red">UNDER DEVELOPEMENT</span>
      <table class="alternating-rows" style="width:100%;">
        <tr>
          <th>Style</th>
          <th>Found on</th>
          <th>Good place to override</th>
        </tr>
        <tr class="alt">
          <td class="style">.word-cell</td>
          <td>The &lt;span&gt; around each &lt;input&gt;, regardless of display style</td>
          <td>
            <li>Font (family, size, color)</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.word-input</td>
          <td>The &lt;input&gt; itself</td>
          <td>
            <li>Resize the input width - i.e. to allow longer phrases</li>
          </td>
        </tr>

        <tr>
          <td colspan="3" style="font-weight: bold;">Word styles (always ".word-" + the style name)</td>
        </tr>
        <tr class="alt">
          <td class="style">.word-underline</td>
          <td>The span.word-cell, when data-letter-style=<b>underline</b></td>
          <td>
            <li>Any change in spacing (margin) between underlines</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.word-box</td>
          <td>The span.word-cell, when data-letter-style=<b>box</b></td>
          <td>
            <li>Any change in spacing (margin) between boxes</li>
            <li>Rounded corners on boxes</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.word-grid</td>
          <td>The span.word-cell, when data-letter-style=<b>grid</b></td>
          <td>
            <li>tbd</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.word-hover:hover</td>
          <td>The span.word-cell, when data-letter-style=<b>hover</b></td>
          <td>
            <li>Any change in hover effecgt</li>
          </td>
        </tr>

        <tr>
          <td colspan="3" style="font-weight: bold;">Literal styles (".literal-" + the style name)</td>
        </tr>
        <tr class="alt">
          <td class="style">.word-cell<b>.literal</b></td>
          <td>The span.word-cell when input is a literal</td>
          <td>
            <li>Literal text's font</li>
            <li>Literal text's vertical alignment, relative to input text</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.literal-underline</td>
          <td>The span.word-cell.literal, when data-literal-style=<b>underline</b></td>
          <td>
            <li>Mirror any changes to .word-underline</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.literal-box</td>
          <td>The span.word-cell.literal, when data-literal-style=<b>box</b></td>
          <td>
            <li>Mirror any changes to .word-box</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.block</td>
          <td>The span.word-cell.literal, when <b>block=''</b></td>
          <td>
            <li>Change the block color</li>
          </td>
        </tr>

        <tr>
          <td colspan="3" style="font-weight: bold;">Extract styles</td>
        </tr>
        <tr class="alt">
          <td class="style">.word-cell<b>.extract</b></td>
          <td>The span.word-cell, when input an extracter</td>
          <td>
            <li>TBD</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.extract-highlight</td>
          <td>The span.word-cell.extract, when data-extract-style=<b>highlight</b></td>
          <td>
            <li>The font (size, color, &hellip;) of letters in extraction cells.</li>
            <li>Change the highlight color</li>
          </td>
        </tr>

        <tr class="alt">
          <td class="style">.under-number</td>
          <td>A second span, inside the span.word-cell, which contains the extraction number</td>
          <td>
            <li>The font (face, size, &hellip;) of numbers under extractions, indicating mirrored cell.</li>
          </td>
        </tr>

      </table>
      <p>To ensure a successful override, prefix your local CSS rule with the puzzle's body ID. i.e.<br />
        <code>#MyPuzzle .word-cell `{ font-size: 20pt; `}</code>
      </p>

    </div>

    <template id="link" trim="all">
      <if exists="{elmt?}"><a href="{elmt}.xhtml">&lt;{elmt}/&gt;</a></if>
      <else><a href="{page}.xhtml">{page}</a></else>
    </template>

  </body>
        
</html>