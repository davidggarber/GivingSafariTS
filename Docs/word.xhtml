<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8"></meta>
    <script> var exports = {}; </script>
    <script src="../js/kit24.js"></script>
    <script src="docs.js"></script>
    <script>
      const boiler = {
        safari: 'Docs',
        paperSize: 'ledger',
        orientation: 'portrait',
        title: '&lt;word&gt;',
        reactiveBuilder: 'pageBody'
      };
    </script>
    <script src="docs.js"></script>
    <link href="docs.css" rel="Stylesheet" type="text/css"></link>
    <style>
      th {
        text-align: left;
      }
      td.code {
        font-family: 'Courier New', Courier, monospace;
        background-color: lightblue;
        border: blue solid 1px;
        white-space: nowrap;
      } 
      td.rendered {
        text-align: center;
        white-space: nowrap;
      }
      td.comment {
        font-style: italic;
      }
      td.override {
        font-family: 'Courier New', Courier, monospace;
        white-space: nowrap;
        vertical-align: bottom;
      }
      td.style {
        font-family: 'Courier New', Courier, monospace;
        white-space: nowrap;
      }
      tr.alt:nth-child(odd) td {
        background-color: #ffffdd;
      }
      tr.alt:nth-child(odd) td.code {
        background-color: lightblue;
      }
    </style>
  </head>

  <body id="Word">
    <div id="pageBody">
      <p style="font-weight:bold">Creates a wider input field, sized for a medium-long word.</p>
      <p>Automatically gains some type-support features, but not as many as &lt;letter&gt;.</p>
      <li>Typing stays in the same field. User must type tab or an arrow.</li>
      <li>Backspace deletes within the field. Once empty, backspace moves focus back to previous field.</li>
      <li>Left/right arrow keys work, first within the field, then between them.</li>
      <li>Up/down arrow keys need additional infrastructure. By default, they always move to the next field. (NEED LINK)</li>
      <li>Support for several common stylings, such as underlines and boxes (see below).</li>

      <h2>Attribute-driven variations:</h2>
      <build>
        <table class="alternating-rows" style="width:100%; border-spacing: 2px;">
          <tr>
            <th>HTML</th>
            <th>Rendered</th>
            <th></th>
          </tr>
          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;word&gt;
            </td>
            <td class="rendered"><letter /></td>
            <td class="comment">Input for a single letter</td>
          </tr>

          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;word&gt;
              &lt;word <b>extract</b>&gt;
            </td>
            <td class="rendered">
              <letter />
              <letter extract='true' />
            </td>
            <td class="comment">
              2nd letter is marked for extraction.<br />
              Will be mirrored in document order to any element with <b>id="extracted"</b>.
            </td>
          </tr>

          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;word extract<b>="3"</b>&gt;&lt;word extract<b>="5"</b>&gt;
            </td>
            <td class="rendered">
              <letter extract="3" /><letter extract="5" />
            </td>
            <td class="comment">
              The two letters will become the 3rd and 5th letters in the eventual extraction.
            </td>
          </tr>

          <tr class="alt">
            <td class="code" onclick="selectCodeBlock(this, event)">
              &lt;word&gt;&lt;word <b>literal="+"</b>&gt;&lt;word&gt;
            </td>
            <td class="rendered">
              <letter /><letter literal="+" /><letter />
            </td>
            <td class="comment">
              The middle letter is marked literal.<br />
              It is read-only, and often renders differently.
            </td>
          </tr>

        </table>  
      </build>      



      <h2>Page-wide overrides</h2>
      <p>Letter styles are implemented through CSS. Each letter becomes an &lt;span&gt;&lt;input&gt;&lt;/span&gt;
        <br />where the span is assigned a style based on the variant and any style overrides.
      </p>
      <table class="alternating-rows" style="width:100%;">
        <tr>
          <th>Override attribute</th>
          <th>Default, if unset</th>
          <th>Other Suggestions</th>
        </tr>
        <tr class="alt">
          <td class="override">data-letter-style</td>
          <td>underline: <letter /><letter /></td>
          <td>box: <span data-letter-style="box"><letter /><letter /></span> 
            , grid: <span data-letter-style="grid"><letter /><letter /></span> 
            , hover: <span data-letter-style="hover"><letter /><letter /></span> 
          </td>
        </tr>
        <tr class="alt">
          <td class="override">data-literal-style</td>
          <td>none: <letter /><letter literal="+" /><letter /></td>
          <td>underline: <span data-literal-style="underline"><letter /><letter literal="+" /><letter /></span> 
            , box: <span data-letter-style="box" data-literal-style="box"><letter /><letter literal="+" /><letter /></span> 
            , grid: <span data-letter-style="grid" data-literal-style="grid"><letter /><letter literal="+" /><letter /></span> 
          </td>
        </tr>            
        <tr class="alt">
          <td class="override">data-extract-style</td>
          <td>box: <letter /><letter extract='true' /><letter /></td>
          <td>highlight: <span data-extract-style="highlight"><letter /><letter extract='true' /><letter /></span> 
            , box: <span data-letter-style="box" data-literal-style="highlight"><letter /><letter extract='true' /><letter /></span> 
            , grid: <span data-letter-style="grid" data-literal-style="highlight"><letter /><letter extract='true' /><letter /></span> 
          </td>
        </tr>            
      </table>
        
      <h2>CSS overrides</h2>
      <p>Letter tags generate &lt;span&gt; and &lt;input&gt; elements, with styles that can be overridden.</p>
      <table class="alternating-rows" style="width:100%;">
        <tr>
          <th>Style</th>
          <th>Found on</th>
          <th>Good place to override</th>
        </tr>
        <tr class="alt">
          <td class="style">.letter-cell</td>
          <td>The &lt;span&gt; around each &lt;input&gt;, regardless of display style</td>
          <td>
            <li>Font (family, size, color)</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-input</td>
          <td>The &lt;input&gt; itself</td>
          <td>
            <li>Nothing!<br />The intent is that inputs inherit formatting from their span.letter-cell</li>
          </td>
        </tr>

        <tr>
          <td colspan="3" style="font-weight: bold;">Letter styles (always ".letter-" + the style name)</td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-underline</td>
          <td>The span.letter-cell, when data-letter-style=<b>underline</b></td>
          <td>
            <li>Any change in spacing (margin) between underlines</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-box</td>
          <td>The span.letter-cell, when data-letter-style=<b>box</b></td>
          <td>
            <li>Any change in spacing (margin) between boxes</li>
            <li>Rounded corners on boxes</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-grid</td>
          <td>The span.letter-cell, when data-letter-style=<b>grid</b></td>
          <td>
            <li>tbd</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-hover:hover</td>
          <td>The span.letter-cell, when data-letter-style=<b>hover</b></td>
          <td>
            <li>Any change in hover effecgt</li>
          </td>
        </tr>

        <tr>
          <td colspan="3" style="font-weight: bold;">Literal styles (".literal-" + the style name)</td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-cell<b>.literal</b></td>
          <td>The span.letter-cell when input is a literal</td>
          <td>
            <li>Literal text's font</li>
            <li>Literal text's vertical alignment, relative to input text</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.literal-underline</td>
          <td>The span.letter-cell.literal, when data-literal-style=<b>underline</b></td>
          <td>
            <li>Mirror any changes to .letter-underline</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.literal-box</td>
          <td>The span.letter-cell.literal, when data-literal-style=<b>box</b></td>
          <td>
            <li>Mirror any changes to .letter-box</li>
          </td>
        </tr>

        <tr>
          <td colspan="3" style="font-weight: bold;">Extract styles</td>
        </tr>
        <tr class="alt">
          <td class="style">.letter-cell<b>.extract</b></td>
          <td>The span.letter-cell, when input an extracter</td>
          <td>
            <li>TBD</li>
          </td>
        </tr>
        <tr class="alt">
          <td class="style">.extract-highlight</td>
          <td>The span.letter-cell.extract, when data-extract-style=<b>highlight</b></td>
          <td>
            <li>The font (size, color, &hellip;) of letters typed into extraction cells.</li>
          </td>
        </tr>

        <tr class="alt">
          <td class="style">.under-number</td>
          <td>A second span, inside the span.letter-cell, which contains the extraction number</td>
          <td>
            <li>The font (face, size, &hellip;) of numbers under extractions, indicating mirrored cell.</li>
          </td>
        </tr>

      </table>
      <p>To ensure a successful override, prefix your local CSS rule with the puzzle's body ID. i.e.<br />
        <code>#MyPuzzle .letter-cell { font-size: 20pt; }</code>
      </p>

      <h2>Special Literal Characters</h2>
      <div>
        <code>literal="¤"</code>
        <span style="margin-left:.3in;">When present, the literal character is a solid dark-gray box. 
          Especially handy in grids:</span>
        <span data-letter-style="grid" data-literal-style="grid"><letter /><letter literal="¤" /><letter /></span>
      </div>

    </div>
  </body>
        
</html>