<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8"></meta>
    <script> var exports = {}; </script>
    <script src="../js/kit25.js"></script>
    <script>
      //<![CDATA[
      const boiler = {
        'safari': 'Docs',
        'title': '<if>',
        paperSize: 'ledger',
        orientation: 'landscape',
        textInput: true,
        abilities: {
        },
        reactiveBuilder: true,
        lookup: {
          sentenceVar: "{sentence}",
          enabledVar: "{enabled}",
          optVar: ["{optional.0}","{optional.1}","{optional.2}","{optional.3}","{optional.4}","{optional.5}"],
          numbers: [
            { var:"{magic}", oper: 'eq', val: '123', trueWhen: 'equals 123' }, 
            { var:"{magic}", oper: 'ne', val: '321', trueWhen: 'doesn\'t equal 321' }, 
            { var:"{magic}", oper: 'gt', val: '120', trueWhen: 'is greater than 120' }, 
            { var:"{magic}", oper: 'ge', val: '123', trueWhen: 'is greater than, or equal to 123' }, 
            { var:"{magic}", oper: 'lt', val: '125', trueWhen: 'is less than 125' }, 
            { var:"{magic}", oper: 'le', val: '123', trueWhen: 'is less than, or equal to 123' }, 
          ],
          strings: [
            { var:"doc", oper: 'in', val: '{sentence}', trueWhen: 'is a substring of {sentence}' }, 
            { var:"cod", oper: 'ni', val: '{sentence}', trueWhen: 'is not a substring of {sentence}"' }, 
          ],
          lists: [
            { var:"bold", oper: 'in', val: '{fonts}', trueWhen: 'occurs in the {fonts} list' }, 
            { var:"bald", oper: 'ni', val: '{fonts}', trueWhen: 'does not occur in the {fonts} list' }, 
          ],

          magic: "123",
          sentence: "Help docs",
          fonts: [ 
            'bold', 
            'italic' 
          ],
          enabled: true,
          optional: ['x', {}, [], null, undefined, ''],
        } 
      };
      //]]>
    </script>
    <script src="docs.js"></script>
    <link href="docs.css" rel="Stylesheet" type="text/css"></link>
    <style>
      #right-side code.inline {
        width: initial;
      }
      .group {
        width: 100%;
        margin-bottom: 6pt;
      }
      .indent {
        margin-left: 0.1in;
      }
      th {
        text-align: left;
        padding-top: 10px;
      }
      #grid-example td {
        background-color: initial;
      }
    </style>
  </head>
  <body id="If">
    <div id="pageBody">
      <div id="left-side">

        <p>Use the new <strong>&lt;if&gt;</strong> tag to conditionally include blocks of HTML.</p>

        <p>The tested value of conditionals are implicitly lookups, so the {curly} syntax is not needed.
          However, all examples here use them.</p>

        <p>There are numerous ways to evaluate the tested value. They are distinguished by different attribute syntaxes.</p> 
        <build>
          <ttable style="width:100%">
            <ttr>
              <tth>Boolean conditions</tth>
              <tth>Apply contents if &hellip;</tth>
            </ttr>
            <ttr>
              <ttd>
                <code onclick="selectCodeBlock(this, event)">&lt;if <b style="font-size: large;">test</b>="{enabledVar}"&gt;<br/>
                  &nbsp; <i>&lt;!-- contents --&gt;</i>
                  &lt;/if&gt;
                </code>
              </ttd>
              <ttd>{enabledVar} is true</ttd>
            </ttr>  
            <ttr>
              <ttd>
                <code onclick="selectCodeBlock(this, event)">&lt;if <b style="font-size: large;">not</b>="{enabledVar}"&gt;<br/>
                  &nbsp; <i>&lt;!-- contents --&gt;</i>
                  &lt;/if&gt;
                </code>
              </ttd>
              <ttd>{enabledVar} is false</ttd>
            </ttr>  

            <ttr>
              <tth>Numeric conditions</tth>
              <tth>&nbsp;</tth>
            </ttr>
            <for each="eval" in="{numbers}">
              <ttr>
                <ttd><use template="iftest" row="{eval}"></use></ttd>
                <ttd>{eval.var} {eval.trueWhen}</ttd>
              </ttr>  
            </for>

            <ttr>
              <tth>String conditions</tth>
              <tth>&nbsp;</tth>
            </ttr>
            <for each="eval" in="{strings}">
              <ttr>
                <ttd><use template="iftest" row="{eval}"></use></ttd>
                <ttd>{eval.var} {eval.trueWhen}</ttd>
              </ttr>  
            </for>

            <ttr>
              <tth>List conditions</tth>
              <tth>&nbsp;</tth>
            </ttr>
            <for each="eval" in="{lists}">
              <ttr>
                <ttd><use template="iftest" row="{eval}"></use></ttd>
                <ttd>{eval.var} {eval.trueWhen}</ttd>
              </ttr>  
            </for>

            <ttr>
              <tth>Existence/validity conditions</tth>
              <tth>&nbsp;</tth>
            </ttr>
            <ttr>
              <ttd>
                <code onclick="selectCodeBlock(this, event)">&lt;if <b style="font-size: large;">exists</b>="{optVar.0}"&gt;<br/>
                  &nbsp; <i>&lt;!-- contents --&gt;</i>
                  &lt;/if&gt;
                </code>
              </ttd>
              <ttd>{optVar.0} is neither null, undefined, or ''.<br />Empty objects and lists are ok.</ttd>
            </ttr>  
            <ttr>
              <ttd>
                <code onclick="selectCodeBlock(this, event)">&lt;if <b style="font-size: large;">not</b>="{optVar.2}"&gt;<br/>
                  &nbsp; <i>&lt;!-- contents --&gt;</i>
                  &lt;/if&gt;
                </code>
              </ttd>
              <ttd>{optVar.2} <i>is</i> one of null, undefined, or ''.</ttd>
            </ttr>  

          </ttable>
        </build>


      </div>

      <div id="right-side">
        <h3>Regular expressions</h3>

        <p>One addition condition attribute: <b>regex</b></p>

        <table>
          <tr>
            <td>
              <build>
                <code onclick="selectCodeBlock(this, event)">&lt;if test="{sentenceVar}" <b style="font-size: large;">regex</b>="^H.*s$"&gt;<br/>
                  &nbsp; <i>&lt;!-- contents --&gt;</i>
                  &lt;/if&gt;
                </code>
  
              </build>
            
            </td>
            <td>
              {sentence} starts with 'H' and ends with 's'
            </td>
          </tr>
          <tr>
            <td>
              <code onclick="selectCodeBlock(this, event)"><pre>&lt;for word="w" in="{sentence}"&gt;
  &lt;if test="w" <b style="font-size: large;">regex</b>="^[a-z]+$"&gt;{w}&lt;/if&gt;
&lt;/for&gt;</pre></code>
            </td>
            <td>
              Each word in {sentence} that is all lower-case
            </td>
          </tr>
        </table>



        <h3>&lt;elseif&gt; and &lt;else&gt; sequences</h3>

        <p>Like most programming languages, the first &lt;if&gt; or &lt;elseif&gt; whose condition passes will expand,
          and any subsequent siblings will be no-ops.</p>

        <table>
          <tr>
            <td>
              <code onclick="selectCodeBlock(this, event)"><pre>
&lt;for char="ch" in="{sentence}" trim&gt;
  &lt;if test="ch" eq=" "&gt;&nbsp;&lt;/if&gt;
  &lt;elseif test="ch" in="oO"&gt;ðŸ˜¶&lt;/if&gt;
  &lt;elseif test="ch" ni="ABCDEFGHIJKLMNOPQRSTUVWXYZ"&gt;
    &lt;i&gt;{ch}&lt;/i&gt;
  &lt;/elseif&gt;
  &lt;else&gt;&lt;b style='color:red'&gt;{ch}&lt;/b&gt;&lt;/else&gt;
&lt;/for&gt;</pre></code>
            </td>
            <td>
              <for char="ch" in="{sentence}" trim="on">
                <if test="ch" eq=" ">&nbsp;</if>
                <elseif test="ch" in="oO">ðŸ˜¶</elseif>
                <elseif test="ch" ni="ABCDEFGHIJKLMNOPQRSTUVWXYZ">
                  <i>{ch}</i>
                </elseif>
                <else><b style='color:red'>{ch}</b></else>
              </for>
            </td>
          </tr>
        </table>


        <p>Note that the table tags don't play well with
          <code class="inline">&lt;if&gt;</code> or
          <code class="inline">&lt;for&gt;</code> tags.<br />
          As such, encode table (and some other) tags:
          <code class="inline">&lt;ttable&gt;</code>,
          <code class="inline">&lt;ttr&gt;</code>,
          <code class="inline">&lt;tth&gt;</code>,
          <code class="inline">&lt;ttd&gt;</code> &hellip;
        </p>

        <h3 style="margin-top: 48px;">Builder Lookup Data</h3>
        <p>All examples are based on these sample entries in the boiler javascript object.</p>
        <code onclick="selectCodeBlock(this, event)"><pre>
const boiler = {
  'lookup': {
    magic: 123,
    sentence: 'Help docs',
    fonts: [ 
      'bold', 
      'italic' 
    ],
    enabled: true
  }
}</pre></code>


      </div>
    </div>

    <template id="code">
      <code onclick="selectCodeBlock(this, event)">{value}</code>
    </template>
    <template id="tag">
      <use template="code" value="&lt;{value}&gt;"></use>
    </template>
    <template id="iftest">
      <code onclick="selectCodeBlock(this, event)">&lt;if test="{row.var}" <b style="font-size: large;">{row.oper}</b>="{row.val}"&gt;<br/>
        &nbsp; <i>&lt;!-- contents --&gt;</i>
        &lt;/if&gt;
      </code>
    </template>

    <template id="simple">
      <span data-input-style="{dis?}">
        &ldquo;<letter /><letter /> 
        <letter /><letter />-<letter /><letter />&rdquo;
      </span>
    </template>

    <template id="lit">
      <span data-input-style="{dis?}" data-literal-style="{dls?}">
        <letter /><letter literal="-" /><letter /><letter literal="&rsquo;" /><letter /><letter literal="!" />
      </span>
    </template>
    <template id="gridblocks">
      <div data-input-style="grid" data-literal-style="{dls?}">
        <div class="letter-cell-block"><letter literal="Â¤" /><letter /><letter /><letter literal=" " /><letter /><letter literal="$" /></div>
      </div>
    </template>

    <template id="extr">
      <span data-input-style="{dis?}" data-extract-style="{des?}">
        <letter /><letter extract="" /><letter /> <letter /><letter extract="" /><letter />
      </span>
    </template>

  </body>
</html>