<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8" />
    <script> var exports = {}; </script>
    <script src="../js/kit24.js" />
    <script src="sync.js" />
    <link href="sync.css" rel="Stylesheet" type="text/css"></link>
    <script>
      //<![CDATA[
      const boiler = {
        safari: 'Admin',
        orientation: 'landscape',
        title: 'Puzzle Completion',
        postSetup: doRefresh,
        reactiveBuilder: 'pageBody',
        lookup: {},
      };

      var eventName = 'GivingSafari24';
      var firstLoad = true;

      const queryString = window.location.search;
      const urlParams = new URLSearchParams(queryString);
      if (urlParams.has('e')) {
        eventName =urlParams.get('e');
        boiler.lookup['eventName'] = eventName;
      }
      var puzzleName = urlParams.get('z');
      if (puzzleName) {
        boiler.lookup['puzzleName'] = puzzleName;
        boiler.title = 'Puzzle Completion: ' + puzzleName;
      }
      else {
        window.location.href = 'Puzzles.xhtml?' + urlParams;
      }

      function doRefresh() {
        var data = {
          eventName: eventName,
          puzzle: puzzleName,
          timeZone: 'Pacific Standard Time',  // TODO: get from javascript
        }
        queryServer('PuzzleCompletion', data, refreshWithResponse);
        data = {
          eventName: eventName,
        }
        queryServer('PuzzleList', data, refreshPicker);
      }

      var colKeys = ['Name', 'Activity', 'Guess', 'Timestamp']

      function refreshWithResponse(response) {
        var list = JSON.parse(response);
        var tbody = document.getElementById('list-tbody');
        
        // See what rows we already have
        var existing = rowIdSet(tbody, false);

        for (var row of list) {
          var id = `row-${row['Name']}`;
          var tr = document.getElementById(id);
          if (tr) {
            // Already exists
            toggleClass(tr, 'missing', false);
            existing[id] = null;
          }
          else {
            tr = appendFromTemplate(tbody, 'teamRow', row);            
            toggleClass(tr, 'new', !firstLoad);
            if (row['Activity'] == 'Solved') {
              toggleClass(tr, 'correct', true);
            }
            tbody.appendChild(tr);
          }
        }

        // If any pre-existing rows have gone missing, tag them
        var missing = Object.entries(existing).filter(pair => pair[1]).map(pair => pair[0]);
        markAsMissing(missing);

        firstLoad = false;
      }

      function refreshPicker(response) {
        var list = JSON.parse(response);
        var select = document.getElementById('picker');
        for (var row of list) {
          var opt = document.getElementById(row.PuzzleName);
          if (!opt) {
            opt = document.createElement('option');
            opt.id = row.PuzzleName;
            opt.value = row.PuzzleName;
            opt.innerText = row.PuzzleName;
            opt.class = row.PuzzleType;
            select.appendChild(opt);
          }
        }
      }

      function changePicker() {
        var pick = document.getElementById('picker').value;
        if (pick != puzzleName) {
          window.location.href = 'Completion.xhtml?z=' + encodeURIComponent(pick);
        }
      }

      // ]]>
    </script>
    <style>
      #picker {
        font-size: 24pt;
        font-weight: bold;
      }
      #picker * {
        font-size: 12pt;
      }
      .correct td.Guess:after {
        content: 'âœ…';
      }
      tr:hover .Name {
        font-weight: bold;
      }
    </style>
  </head>
  <body id="ListPuzzles">
    <div id="pageBody">
      <p>
        <select id="picker" value="{puzzleName}" onchange="changePicker()">
          <option id="{puzzleName}" value="{puzzleName}">{puzzleName}</option>
        </select>
      </p>
      <p>
        <button onclick="doRefresh()">Refresh Puzzle List</button>
        <a href="Puzzles.xhtml?e={eventName}">All puzzles</a>
      </p>
      <table>
        <thead>
          <tr id="header-row">
            <th style="min-width:2in;">Team</th>
            <th style="min-width:2in;">Progress</th>
            <th style="min-width:1.5in;">Submission</th>
            <th style="min-width:1.5in;">Timestamp</th>
          </tr>
        </thead>
        <tbody id="list-tbody" class="alternate">
          
        </tbody>
      </table>

    </div>

    <template id="teamRow">
      <ttr id="row-{Name}">
        <ttd class="Name"><a href="TeamStatus.xhtml?t={Name}">{Name}</a></ttd>
        <ttd class="Activity">{Activity}</ttd>
        <ttd class="Guess">{Guess}</ttd>
        <ttd class="Timestamp">{Timestamp}</ttd>
      </ttr>      
    </template>


  </body>
</html>
