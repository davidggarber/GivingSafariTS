<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="UTF-8" />
    <script> var exports = {}; </script>
    <script src="../js/kit24.js" />
    <script src="sync.js" />
    <link href="sync.css" rel="Stylesheet" type="text/css"></link>
    <script>
      //<![CDATA[
      const boiler = {
        safari: 'Admin',
        paperSize: 'ledger',
        orientation: 'portrait',
        title: 'Puzzle Completion',
        postSetup: doRefresh,
        reactiveBuilder: 'pageBody',
        lookup: {},
      };

      var eventName = 'GivingSafari24';  // TODO: get from URL
      var firstLoad = true;

      const queryString = window.location.search;
      const urlParams = new URLSearchParams(queryString);
      if (urlParams.has('e')) {
        eventName =urlParams.get('e');
      }
      boiler.lookup['eventName'] = eventName;

      var teamName = urlParams.get('t');
      if (teamName) {
        boiler.lookup['teamName'] = teamName;
        boiler.title = 'Team Status: ' + teamName;
      }
      else {
        window.location.href = 'Teams.xhtml?' + urlParams;
      }

      function doRefresh() {
        var data = {
          eventName: eventName,
          team: teamName,
        }
        queryServer('TeamStatus', data, refreshWithResponse);
        data = {
          eventName: eventName,
        }
        queryServer('TeamList', data, refreshPicker);
      }

      // Columns are not known in advance
      var colKeys = ['puzzle']

      function refreshWithResponse(response) {
        var list = JSON.parse(response);
        var tbody = document.getElementById('list-tbody');
        
        // See what rows we already have
        var existing = rowIdSet(tbody, true);

        // Use the first row to fix the headers
        if (list.length > 0) {
          colKeys = refreshColumns(Object.keys(list[0]));
        }

        for (var row of list) {
          if (row['puzzle'] == '') {
            row['puzzle'] = '[Home page]';
          }
          var id = `row-${row['puzzle']}`;
          var tr = document.getElementById(id);
          if (tr) {
            // Already exists
            toggleClass(tr, 'missing', false);
            toggleClass(tr, 'new', false);
            existing[id] = null;

            // Columns can still update
            refreshRow(tr, row, colKeys);
          }
          else {
            tr = createRow(id, row, colKeys);
            toggleClass(tr, 'new', !firstLoad);
            tbody.appendChild(tr);
          }
        }

        // If any pre-existing rows have gone missing, tag them
        var missing = Object.entries(existing).filter(pair => pair[1]).map(pair => pair[0]);
        markAsMissing(missing);

        firstLoad = false;
      }

      function refreshColumns(colNames) {
        var tr = document.getElementById('header-row');
        var existing = childIdSet(tr, 'th', true);

        for (var col of colNames) {
          var id = `col-${col}`;
          var th = document.getElementById(id);
          if (th) {
            // Already exists
            toggleClass(th, 'missing', false);
            existing[id] = null;
          }
          else {
            appendFromTemplate(tr, 'playerInfo', {playerName:col});
          }
        }

        // If any pre-existing cols have gone missing, tag them
        var missing = Object.entries(existing).filter(pair => pair[1]).map(pair => pair[0]);
        markAsMissing(missing);

        // List all of the columns as keys
        var allCols = childIdSet(tr, 'th', true);  // Regenerate, after refresh
        var keys = Object.entries(allCols).map(pair => pair[0].substring(4));  // strip 'col-' prefixes
        return keys;
      }

      function changePicker() {
        var pick = document.getElementById('picker').value;
        if (pick != teamName) {
          window.location.href = 'TeamStatus.xhtml?t=' + encodeURIComponent(pick);
        }
      }

      // ]]>
    </script>
    <style>
      #picker {
        font-size: 24pt;
        font-weight: bold;
      }
      #picker * {
        font-size: 12pt;
      }
      .correct td.Guess:after {
        content: '✅';
      }
    </style>
  </head>
  <body id="ListPuzzles">
    <!--
      A table of all puzzles (rows) and all players (columns).
      Each cell is how far the player has progressed on that puzzle.
      -->
    <div id="pageBody">
      <p>
        <select id="picker" value="{teamName}" onchange="changePicker()" />
      </p>
      <p>
        <button onclick="doRefresh()">Refresh</button>
        <a href="Teams.xhtml?e={eventName}">All teams</a>
      </p>
      <table>
        <thead>
          <tr id="header-row" class="sortable">
            <th id="col-puzzle" style="min-width:1.5in;" onclick="sortTable(this)" trim="all">
              Puzzle
              <span class="ascArrow">↓</span>
              <span class="descArrow">↑</span>
            </th>
          </tr>
        </thead>
        <tbody id="list-tbody" class="alternate">
          
        </tbody>
      </table>

    </div>

    <template id="playerInfo">
      <th id="col-{playerName}" onclick="sortTable(this)" trim="all">
        {playerName}
        <span class="ascArrow">↓</span>
        <span class="descArrow">↑</span>
      </th>
    </template>

  </body>
</html>
